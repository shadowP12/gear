#version 450
#extension GL_ARB_separate_shader_objects : enable

// Based on Godot Engine's implementation.
// <https://github.com/godotengine/godot/tree/master>

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform ConstantBlock
{
    uint cluster_render_data_size;
    uint cluster_helper_offset;
    uvec2 cluster_screen_size;
    uint max_render_element_count_div_32;
    uint render_element_count_div_32;
    uint max_cluster_element_count_div_32;
    uint pad1;
    uint pad2;
} constant;

layout(set = 0, binding = 1, std430) buffer restrict readonly ClusterRender {
    uint data[];
} cluster_render;

layout(set = 0, binding = 2, std430) buffer restrict ClusterStore {
    uint data[];
} cluster_store;

struct RenderElement
{
    uint type;
    uint original_index;
    uint pad0;
    uint pad1;
    mat4 transform;
    vec3 scale;
    uint pad2;
};

layout(set = 0, binding = 3, std430) buffer restrict readonly RenderElements
{
    RenderElement data[];
} render_elements;

void main()
{
    uvec2 pos = gl_GlobalInvocationID.xy;
    if (any(greaterThanEqual(pos, constant.cluster_screen_size)))
    {
        return;
    }

    uint base_offset = (pos.x + constant.cluster_screen_size.x * pos.y);
    uint src_offset = base_offset * constant.cluster_render_data_size;

    uint render_element_offset = 0;
    while (render_element_offset < constant.render_element_count_div_32)
    {
        uint bits = cluster_render.data[src_offset + render_element_offset];
        while (bits != 0)
        {
            uint index_bit = findLSB(bits);
            uint index = render_element_offset * 32 + index_bit;
            uint type = render_elements.data[index].type;

            uint z_range_offset = src_offset + constant.max_render_element_count_div_32 + index;
            uint z_range = cluster_render.data[z_range_offset];
            if (z_range != 0)
            {
                uint helper_offset = src_offset + constant.cluster_helper_offset + index;
                uint z_minmax = cluster_render.data[helper_offset];
                uint from_z = z_minmax & uint(0xFFFF);
                uint to_z = (z_minmax >> 16) + 1;

                uint dst_offset = (base_offset + type * (constant.cluster_screen_size.x * constant.cluster_screen_size.y)) * (constant.max_cluster_element_count_div_32 + 32);
                uint orig_index = render_elements.data[index].original_index;
                for (uint i = from_z; i < to_z; i++)
                {
                    uint slice_ofs = dst_offset + constant.max_cluster_element_count_div_32 + i;

                    uint minmax = cluster_store.data[slice_ofs];

                    if (minmax == 0)
                    {
                        minmax = 0xFFFF;
                    }

                    uint elem_min = min(orig_index, minmax & uint(0xFFFF));
                    uint elem_max = max(orig_index + 1, minmax >> 16);

                    minmax = elem_min | (elem_max << 16);
                    cluster_store.data[slice_ofs] = minmax;
                }

                uint store_word = orig_index >> 5;
                uint store_bit = orig_index & uint(0x1F);

                cluster_store.data[dst_offset + store_word] |= 1 << store_bit;
            }

            bits &= uint(~(1 << index_bit));
        }

        render_element_offset++;
    }
}