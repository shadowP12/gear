#version 450
#extension GL_GOOGLE_include_directive : enable

#include "light_inc.glsl"

layout(std140, binding = 0) uniform Params
{
    vec2 near_far;
    vec2 screen_size;
    uvec4 cluster_size;
    mat4 inv_proj;
} u_params;

layout(set = 0, binding = 1, std430) buffer restrict ClusterBuffer
{
    Cluster data[];
} s_clusters;

vec3 screen_to_view(vec2 screen)
{
    vec4 ndc = vec4(screen / u_params.screen_size * 2.0 - 1.0, -1.0, 1.0);
    vec4 view = u_params.inv_proj * ndc;
    view /= view.w;
    return view.xyz;
}

vec3 ray_intersect_z_plane(vec3 start_point, vec3 end_point, float z_distance)
{
    vec3 direction = end_point - start_point;
    vec3 normal = vec3(0.0, 0.0, -1.0);
    float t = (z_distance - dot(normal, start_point)) / dot(normal, direction);
    return start_point + t * direction;
}

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint tile_index =
        gl_WorkGroupID.x +
        gl_WorkGroupID.y * gl_NumWorkGroups.x +
        gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y;
    vec2 tile_size = u_params.screen_size / u_params.cluster_size.xy;

    // Min and max in screen space
    vec2 min_ss = gl_WorkGroupID.xy * tile_size;
    vec2 max_ss = (gl_WorkGroupID.xy + 1) * tile_size;

    // Min and max in view space
    vec3 min_vs = screen_to_view(min_ss);
    vec3 max_vs = screen_to_view(max_ss);

    // Build z palne
    float z_near = u_params.near_far.x;
    float z_far = u_params.near_far.y;
    float plane_near = z_near * pow(z_far / z_near, gl_WorkGroupID.z / float(u_params.cluster_size.z));
    float plane_far = z_near * pow(z_far / z_near, (gl_WorkGroupID.z + 1) / float(u_params.cluster_size.z));

    // Ray intersect with z plane
    vec3 eye_pos = vec3(0, 0, 0);
    vec3 min_near = ray_intersect_z_plane(eye_pos, min_vs, plane_near);
    vec3 min_far = ray_intersect_z_plane(eye_pos, min_vs, plane_far);
    vec3 max_near = ray_intersect_z_plane(eye_pos, max_vs, plane_near);
    vec3 max_far = ray_intersect_z_plane(eye_pos, max_vs, plane_far);

    s_clusters.data[tile_index].aabb_min = vec4(min(min_near, min_far), 0.0);
    s_clusters.data[tile_index].aabb_max = vec4(max(max_near, max_far), 0.0);
    s_clusters.data[tile_index].lit_bits[0] = 0;
    s_clusters.data[tile_index].lit_bits[1] = 0;
}
