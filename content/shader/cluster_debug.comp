#version 450
#extension GL_GOOGLE_include_directive : enable

const vec3 usage_gradient[33] = vec3[]( // 1 (none) + 32
            vec3(0.14, 0.17, 0.23),
            vec3(0.24, 0.44, 0.83),
            vec3(0.23, 0.57, 0.84),
            vec3(0.22, 0.71, 0.84),
            vec3(0.22, 0.85, 0.83),
            vec3(0.21, 0.85, 0.72),
            vec3(0.21, 0.85, 0.57),
            vec3(0.20, 0.85, 0.42),
            vec3(0.20, 0.85, 0.27),
            vec3(0.27, 0.86, 0.19),
            vec3(0.51, 0.85, 0.19),
            vec3(0.57, 0.86, 0.19),
            vec3(0.62, 0.85, 0.19),
            vec3(0.67, 0.86, 0.20),
            vec3(0.73, 0.85, 0.20),
            vec3(0.78, 0.85, 0.20),
            vec3(0.83, 0.85, 0.20),
            vec3(0.85, 0.82, 0.20),
            vec3(0.85, 0.76, 0.20),
            vec3(0.85, 0.81, 0.20),
            vec3(0.85, 0.65, 0.20),
            vec3(0.84, 0.60, 0.21),
            vec3(0.84, 0.56, 0.21),
            vec3(0.84, 0.51, 0.21),
            vec3(0.84, 0.46, 0.21),
            vec3(0.84, 0.41, 0.21),
            vec3(0.84, 0.36, 0.21),
            vec3(0.84, 0.31, 0.21),
            vec3(0.84, 0.27, 0.21),
            vec3(0.83, 0.22, 0.22),
            vec3(0.83, 0.22, 0.27),
            vec3(0.83, 0.22, 0.32),
            vec3(1.00, 0.63, 0.70));

#define USING_FRAME_UNIFORMS 0
#include "uniforms.glsl"
#include "light_inc.glsl"

layout(std140, binding = 1) uniform Params
{
    uvec2 screen_size;
} u_params;

layout(set = 0, binding = 2, std430) buffer restrict ClusterBuffer
{
    Cluster data[];
} s_clusters;

layout(rgba8, set = 0, binding = 3) uniform restrict writeonly image2D screen_buffer;
layout(set = 0, binding = 4) uniform sampler2D depth_buffer;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    uvec2 screen_pos = gl_GlobalInvocationID.xy;
    if (any(greaterThanEqual(screen_pos, u_params.screen_size)))
    {
        return;
    }

    float z_near = u_frame.z_near_far.x;
    float z_far = u_frame.z_near_far.y;
    float depth = texelFetch(depth_buffer, ivec2(screen_pos), 0).r;
    depth = z_near * z_far / (z_far + depth * (z_near - z_far)); // Linearize depth
    uint z_tile = uint(log2(abs(depth) / z_near) / log2(z_far / z_near) * float(u_frame.cluster_size.z));

    vec2 tile_size = u_params.screen_size / u_frame.cluster_size.xy;
    uvec3 tile = uvec3(screen_pos / tile_size, z_tile);
    uint tile_index = tile.x + (tile.y * u_frame.cluster_size.x) + (tile.z * u_frame.cluster_size.x * u_frame.cluster_size.y);

    uint item_count = 0;
    uint bits = s_clusters.data[tile_index].lit_bits.y; // lit_bits.y
    while (bits != 0)
    {
        uint bit = findLSB(bits);
        item_count++;
        bits &= uint(~(1 << bit));
    }

    item_count = min(item_count, 32);
    vec3 color = usage_gradient[item_count];
    color = mix(color * 1.2, color * 0.3, float(z_tile) / 31.0);
    imageStore(screen_buffer, ivec2(screen_pos), vec4(color, 1.0));
}